{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","getComic","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices","View","imgStyle","className","href","RandomChar","setChar","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","i","ref","el","tabIndex","onCharSelected","onKeyPress","e","key","renderItems","disabled","Skeleton","CharInfo","charId","skeleton","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","MainPage","selectedChar","decoration"],"mappings":"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","file":"static/js/3.64c1be48.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => { //картинка, при возврате ошибки с сервера\r\n    return (\r\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} /> - обращаемся к окружению и находим папку public\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\r\n\r\n//Простой класс на обычном JS (ничего наследовать от React не требуется)\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'; // _ данные не должны изменяться\r\n    const _apiKey = 'apikey=ebdf3e4682780795ea407ac7fd512bcc';\r\n    const _baseOffset = 210; //начинаем с такого кол-ва персонажей\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => { //получение всех персонажей (по умолчанию offset = 210)\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter); //получаем новый массив с нужными характеристиками персонажей\r\n    }\r\n\r\n    const getCharacter = async (id) => { //получение определенного персонажа по id\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`); //получаем все характеристики\r\n        return _transformCharacter(res.data.results[0]); //получение только нужных характеристик\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => { //получение нужных данных из API\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic} //вытаскиваем нужные компоненты для дальнейшего использования\r\n}\r\n\r\nexport default useMarvelService;","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => { // Хук запроса и обработки данных с сервера\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n\r\n    const request = useCallback(async (url, method='GET', body = null, headers = {'Content-type': 'applicatiion/json'}) => {\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`); //отправим в catch\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLoading(false); //как данные пришли, выключим загрузку\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message); //поменяем на заранее подготовленное сообщение (установим ошибку)\r\n            throw(e); //выкидываем ошибку\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n    const {loading, error, getCharacter, clearError} = useMarvelService(); //берем сразу из нашего Хука и можем там менять\n    //спинер загрузки и ошибки теперь обрабатываются внутри Хука (при каждлм обращении к серверу)\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 3600000);\n\n        return () => {\n            clearInterval(timerId); //отписываемся от повторяющегося действия\n        }\n    }, [])\n\n    const onCharLoaded = (char) => { //записываем в объект с персонажами, после загрузки из API\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError(); //очищаем ошибку от сообщения, для подгрузки нового персонажа\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000); //рандомное число\n        getCharacter(id)\n            .then(onCharLoaded); //перезаписываем объект с нужными характеристиками из API\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => { //компонент View просто принимает данные и отображает на странице\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false); //загрузка новых персонажей\n    const [offset, setOffset] = useState(210); //с какого кол-ва персонажей начинаем\n    const [charEnded, setCharEnded] = useState(false); //когда закончился массив с персонажами\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => { //при создании элемента на странице\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => { //делаем запрос на сервер с новым отступом (в 9 персонажей)\n        initial ? setNewItemLoading(false) : setNewItemLoading(true); //включается загрузка, только при подгрузке новых персонажей\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => { //записываем в массив с персонажами, после загрузки из API (персонажи загрузились)\n        let ended = false;\n        if (newCharList.length < 9) { //если осталось меньше 9 персонажей на сервере, меняем ниже состояние charEnded\n            ended = true;\n        }\n        \n        setCharList(charList => [...charList, ...newCharList]); //добавляем новых 9 персонажей к старым 0, 9, 18, 27 и т.д.\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => { //при клике добавим класс и фокус на элемент\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <li //id передается выше в app\n                    ref={el => itemRefs.current[i] = el}\n                    className=\"char__item\"\n                    key={item.id}\n                    tabIndex={0} //фокус на элементе с клавиатуры \n                    onClick={() => {\n                        props.onCharSelected(item.id); //передаем id выше в App\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => { //событие нажатия на клавиатуру (элемент должен быть в фокусе)\n                        if (e.key === ' ' || e.key === 'Enter') {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        \n        return ( //эта конструкция вынесена для центровки спиннера/ошибки\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n    \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null; // идет загрузка первых 9 и не загрузка новых персонажей\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading} //если идет подгрузка персонажей, кнопка стает неактивной\n                style={{'display': charEnded ? 'none' : 'block'}} //когда уже некого загружать, скрываем кнопку\n                //при клике, добавляем 9 новых персонажей\n                onClick={() => onRequest(offset)}> \n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = { //проверяем на тип данных и их наличие\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null); //пустой объект, это уже true, хоть и в нем ничего нет (а null даст как раз false)\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props; //вытаскиваем полученный id из App (записали в props)\n        if (!charId) { //если ID нет, то остановим метод (при первой загузке ничего и не покажет)\n            return; \n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => { //записываем в объект с персонажами, после загрузки из API\n        setChar(char);\n    }\n\n    //здесь прописана логика и состояние компонента, до формирования верстки (View)\n    const skeleton = char || loading || error ? null : <Skeleton/>; //постим заглушку (скелетон), если ничего нет\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null; //не загрузка, не ошибка, но есть персонаж\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => { //формирование верстки на странице\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {comics.map((item, i) => {\n                    // eslint-disable-next-line\n                    if (i > 9) return; //при большем кол-ве элементов применять стандартный цикл с break!\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )    \n                })}\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component { //ловит ошибки в дочерних компонентах, рендерит новые данные при ошибке\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children; //рендерится дочерний компонент ( который обернули )\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import {useState} from 'react';\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null)\r\n\r\n    const onCharSelected = (id) => { //получаем из CharList и перезаписываем в state\r\n        setChar(id);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar}/>\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}